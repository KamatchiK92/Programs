#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
};


int checkHeightBalance(struct Node* root, int* height)
{
    if(root==NULL)
    {
       *height=0;
       return 1;
    }
    int leftHeight =0, rightHeight=0;
    
    int leftBalanced = checkHeightBalance(root->left, &leftHeight);
    int rightBalanced = checkHeightBalance(root -> right, &rightHeight);
    *height=(leftHeight > rightHeight ? leftHeight : rightHeight) +1;
    if (abs(leftHeight-rightHeight)>1)
    {
        return 0;
    }
    return leftBalanced && rightBalanced;
}


struct Node* newNode(int data);
int isBalanced(struct Node* root); 


int main()
{
    
    struct Node* root=newNode(1);
    root->left=newNode(2);
    root->right=newNode(3);
    root->left->left=newNode(4);
    root->left->right=newNode(5);
    if (isBalanced(root)) {
        printf("The tree is balanced");
    }
    else {
        printf("The tree is not balanced");
}
    return 0;
    
}
struct Node* newNode(int data)
{
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node -> data = data;
    node -> left = NULL;
    node -> right= NULL;
    return node;
}

int isBalanced(struct Node* root)
{
    int height =0;
    return checkHeightBalance(root,&height);
}
